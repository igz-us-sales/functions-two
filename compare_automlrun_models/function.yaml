kind: job
metadata:
  name: compare-automlrun-models
  tag: ''
  hash: 73ccc664ee3e520cf52288b45f84fb1deea9fc32
  project: compare-models
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/ml-models:0.10.0
    commands:
    - python -m pip install evidently==0.1.49.dev0
    code_origin: https://github.com/igz-us-sales/functions.git#f5a29fc9d3aefe743945427fbacf9a39fde7816c:compare_automlrun_models.py
    origin_filename: compare_automlrun_models.py
  description: ''
  default_handler: compare_models
  disable_auto_mount: false
  env:
  - name: V3IO_API
    value: ''
  - name: V3IO_USERNAME
    value: ''
  - name: V3IO_ACCESS_KEY
    value: ''
  - name: V3IO_FRAMESD
    value: ''
  priority_class_name: igz-workload-medium
  affinity: null
verbose: false
